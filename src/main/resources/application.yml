spring:
  config:
    import: "optional:file:.env"
  application:
    name: backoffice-service
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: create
    properties:
      hibernate.dialect: org.hibernate.dialect.PostgreSQLDialect
      format_sql: true
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: log-consumer-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

server:
  port: ${SERVER_PORT}

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_DEFAULT_ZONE}
  instance:
    prefer-ip-address: true
    ip-address: ${EC2_IP} # 마이크로 서비스 ec2 IP
    register-with-eureka: true
    fetch-registry: true

